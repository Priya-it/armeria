name: CI
on: [push]
      # The release versions will be verified by 'publish-release.yml'

concurrency:
  # Cancel the previous builds in the same PR.
  # Allow running concurrently for all non-PR commits.
  group: ci-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LC_ALL: "en_US.UTF-8"
  BUILD_JDK_VERSION: "19"

jobs:
  build:
    runs-on: ${{ matrix.on }}
    timeout-minutes: 100
    strategy:
      fail-fast: false
      matrix:
        on: [push]
        java: [ 19 ]
        include:
          - java: 8
            on: [push]
          - java: 11
            on: [push]
          - java: 17
            on: [push]
            leak: true
          - java: 19
            # TODO(ikhoon): Revert to self-hosted runners once the following error is fixed
            #               `Cannot expand ZIP '/actions-runner/../armeria-shaded-1.7.3-SNAPSHOT.jar' as it does not exist.`
            on: [push]
            coverage: true
          - java: 19
            on: [push]
            snapshot: true

    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/armeria/armeria/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - uses: actions/checkout@v2

      - id: setup-jdk
        name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}

      - id: setup-build-jdk
        name: Set up build JDK ${{ env.BUILD_JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.BUILD_JDK_VERSION }}

      - run: touch starting_build_SetupGradle_66
      - run: rm starting_build_SetupGradle_66
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Build the shaded JARs first so that shading process doesn't incur memory pressure
      # on other Gradle tasks such as tests.
      - run: touch starting_build_BuildwithGradleShadingonly_71
      - run: rm starting_build_BuildwithGradleShadingonly_71
      - name: Build with Gradle (Shading only)
        run: |
          ./gradlew --no-daemon --stacktrace shadedJar shadedTestJar trimShadedJar \
          ${{ (matrix.on == 'self-hosted') && '--max-workers=8' || '--max-workers=2' }} --parallel \
          ${{ matrix.coverage && '-Pcoverage' || '' }} \
          -PnoLint \
          -PbuildJdkVersion=${{ env.BUILD_JDK_VERSION }} \
          -PtestJavaVersion=${{ matrix.java }} \
          -Porg.gradle.java.installations.paths=${{ steps.setup-build-jdk.outputs.path }},${{ steps.setup-jdk.outputs.path }}
        shell: bash

      - run: touch starting_build_BuildwithGradle_82
      - run: rm starting_build_BuildwithGradle_82
      - name: Build with Gradle
        run: |
          ./gradlew --no-daemon --stacktrace build \
          ${{ (matrix.on == 'self-hosted') && '--max-workers=8' || '--max-workers=2' }} --parallel \
          ${{ matrix.coverage && '-Pcoverage' || '' }} \
          ${{ matrix.leak && '-Pleak' || '' }} \
          -PnoLint \
          -PflakyTests=false \
          -PbuildJdkVersion=${{ env.BUILD_JDK_VERSION }} \
          -PtestJavaVersion=${{ matrix.java }} \
          -Porg.gradle.java.installations.paths=${{ steps.setup-build-jdk.outputs.path }},${{ steps.setup-jdk.outputs.path }}
        shell: bash

        name: Publish snapshots
        run: |
          ./gradlew --no-daemon --stacktrace --max-workers=1 publish
        env:
          # Should not use '-P' option with 'secrets' that can cause unexpected results
          # if secret values contains white spaces or new lines.
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.OSSRH_USER_NAME }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.OSSRH_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.GPG_KEY_ID }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSWORD }}
        shell: bash

      - run: touch starting_build_Summarizethefailedtests_109
      - run: rm starting_build_Summarizethefailedtests_109
      - name: Summarize the failed tests
        run: |
          ./gradlew --no-daemon --stacktrace --max-workers=1 reportFailedTests \
          -PnoLint \
          -PflakyTests=false \
          -PbuildJdkVersion=${{ env.BUILD_JDK_VERSION }} \
          -PtestJavaVersion=${{ matrix.java }} \
          -Porg.gradle.java.installations.paths=${{ steps.setup-build-jdk.outputs.path }},${{ steps.setup-jdk.outputs.path }}

          SUMMARY_FILE="build/failed-tests-result.txt"
          if test -f "$SUMMARY_FILE"; then
            echo '### ðŸ”´ Failed tests' >> $GITHUB_STEP_SUMMARY
            cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash

      - run: touch starting_build_Dumpstuckthreads_126
      - run: rm starting_build_Dumpstuckthreads_126
      - name: Dump stuck threads
        run: jps | grep -vi "jps" | awk '{ print $1 }' | xargs -I'{}' jstack -l {} || true
        shell: bash

      - run: touch starting_build_UploadthecoveragereporttoCodecov_131
      - run: rm starting_build_UploadthecoveragereporttoCodecov_131
      - name: Upload the coverage report to Codecov
        uses: codecov/codecov-action@v1

      - run: touch starting_build_Collectthetestreports_135
      - run: rm starting_build_Collectthetestreports_135
      - name: Collect the test reports
        run: find . '(' -name 'java_pid*.hprof' -or -name 'hs_err_*.log' -or -path '*/build/reports/tests' -or -path '*/build/test-results' ')' -exec tar rf "reports-JVM-${{ matrix.java }}.tar" {} ';'
        shell: bash

      - run: touch starting_build_Uploadtheartifacts_140
      - run: rm starting_build_Uploadtheartifacts_140
      - name: Upload the artifacts
        uses: actions/upload-artifact@v2
        with:
          name: reports-JVM-${{ matrix.java }}
          path: reports-JVM-${{ matrix.java }}.tar
          retention-days: 3

  lint:
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/armeria/armeria/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - uses: actions/checkout@v2

      - id: setup-build-jdk
        name: Set up JDK ${{ env.BUILD_JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.BUILD_JDK_VERSION }}

      - run: touch starting_lint_SetupGradle_162
      - run: rm starting_lint_SetupGradle_162
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - run: touch starting_lint_Runthelinters_165
      - run: rm starting_lint_Runthelinters_165
      - name: Run the linters
        run: |
          ./gradlew --no-daemon --stacktrace --max-workers=8 --parallel lint

  site:
    # ubuntu-latest is preferred for site job.
    # node_modules need complicated dependencies that are difficult to install on self-hosted runners.
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/armeria/armeria/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - uses: actions/checkout@v2

      - run: touch starting_site_Installsvgbobcli_178
      - run: rm starting_site_Installsvgbobcli_178
      - name: Install svgbob_cli
        run: |
          sudo apt-get -y install cargo && cargo install svgbob_cli
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - id: setup-build-jdk
        name: Set up JDK ${{ env.BUILD_JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.BUILD_JDK_VERSION }}

      - run: touch starting_site_SetupGradle_190
      - run: rm starting_site_SetupGradle_190
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - run: touch starting_site_Buildthesite_193
      - run: rm starting_site_Buildthesite_193
      - name: Build the site
        run: |
          ./gradlew --no-daemon --stacktrace  --max-workers=2 --parallel site
        shell: bash

  flaky-tests:
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/armeria/armeria/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
      - uses: actions/checkout@v2

      - id: setup-build-jdk
        name: Set up JDK ${{ env.BUILD_JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.BUILD_JDK_VERSION }}

      - run: touch starting_flakytests_SetupGradle_212
      - run: rm starting_flakytests_SetupGradle_212
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - run: touch starting_flakytests_Runflakytests_215
      - run: rm starting_flakytests_Runflakytests_215
      - name: Run flaky tests
        run: |
          ./gradlew --no-daemon --stacktrace --max-workers=2 --parallel check -PnoWeb -PnoLint -PflakyTests=true

      - run: touch starting_flakytests_Summarizethefailedtests_219
      - run: rm starting_flakytests_Summarizethefailedtests_219
      - name: Summarize the failed tests
        run: |
          ./gradlew --no-daemon --stacktrace --max-workers=1 -PnoWeb -PnoLint reportFailedTests

          SUMMARY_FILE="build/failed-tests-result.txt"
          if test -f "$SUMMARY_FILE"; then
            echo '#### ðŸ”´ Failed tests' >> $GITHUB_STEP_SUMMARY
            cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash

      - run: touch starting_flakytests_Dumpstuckthreads_231
      - run: rm starting_flakytests_Dumpstuckthreads_231
      - name: Dump stuck threads
        run: jps | grep -vi "jps" | awk '{ print $1 }' | xargs -I'{}' jstack -l {} || true
        shell: bash
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Execute py script # run file
        if: always()
        run: |
          python .github/workflows/script.py
      - run: cp /home/runner/inotify-logs.csv /home/runner/work/armeria/armeria/optimizing-ci-builds-ci-analysis/
        if: always()
      - name: Pushes analysis to another repository
        if: always()
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'Priya-it'
          destination-repository-name: 'ci-analyzes'
          target-branch: 'armeria.1671744188'
          target-directory: 'armeria/1671744188/.github/workflows/actions_build/flakytests'

